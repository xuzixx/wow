 local _ local BFChat = LibStub('AceAddon-3.0'):GetAddon('BigFootChat'); local L = LibStub("AceLocale-3.0"):GetLocale("BigFootChat"); local MyData = {}; local CurEB = ChatFrame1EditBox; BFC_CurEB = CurEB local function StatReport_Print(msg) if DEFAULT_CHAT_FRAME then DEFAULT_CHAT_FRAME:AddMessage(StatReport_Preview, 1, 0.9, 0.4); DEFAULT_CHAT_FRAME:AddMessage(tostring(msg), 1, 0.9, 0.4); end end local function StatReport_ChatFrameEditBoxMSG(msg) local ExistMSG = CurEB:GetText() or ""; if CurEB:IsShown() then CurEB:Insert(msg); else StatReport_Print(msg); end end local function StatReport_GetPvPSpecText(switch) local text = ""; if GetCombatRating(16) > 0 then text = text..MyData.CRDEF..StatReport_Strings_CRDEF; text = text..StatReport_Strings_COMMA; end if GetCombatRating(27) > 0 then text = text..MyData.CRPP..StatReport_Strings_CRPP; text = text..StatReport_Strings_COMMA; end if switch or GetCombatRating(16) > 0 or GetCombatRating(27) > 0 then text = text..MyData.HP..StatReport_Strings_HP; text = text..StatReport_Strings_COMMA; end return text; end local function StatReport_GetSpellText() local text = ""; text = text..StatReport_GetPvPSpecText(); if GetCombatRating(20) > 0 then text = text..MyData.SHASTE..StatReport_Strings_HASTE; text = text..StatReport_Strings_COMMA; end if GetCombatRating(8) > 0 then text = text..MyData.SHIT..StatReport_Strings_HIT; text = text..StatReport_Strings_COMMA; end text = text..MyData.SCRIT..StatReport_Strings_CRIT; text = text..StatReport_Strings_COMMA; text = text..MyData.SSP..StatReport_Strings_SSP; return text; end local function StatReport_GetHealText() local text = ""; text = text..StatReport_GetPvPSpecText(); if GetCombatRating(20) > 0 then text = text..MyData.SHASTE..StatReport_Strings_HASTE; text = text..StatReport_Strings_COMMA; end text = text..MyData.SCRIT..StatReport_Strings_CRIT; text = text..StatReport_Strings_COMMA; text = text..MyData.SPI..StatReport_Strings_SPI; text = text..StatReport_Strings_COMMA; text = text..MyData.SHP..StatReport_Strings_SHP; return text; end local function StatReport_GetSpellAndHealText() local text = ""; text = text..StatReport_GetPvPSpecText(); if GetCombatRating(20) > 0 then text = text..MyData.SHASTE..StatReport_Strings_HASTE; text = text..StatReport_Strings_COMMA; end if GetCombatRating(8) > 0 then text = text..MyData.SHIT..StatReport_Strings_HIT; text = text..StatReport_Strings_COMMA; end text = text..MyData.SCRIT..StatReport_Strings_CRIT; text = text..StatReport_Strings_COMMA; text = text..MyData.SPI..StatReport_Strings_SPI; text = text..StatReport_Strings_COMMA; text = text..MyData.SSP..StatReport_Strings_SSP; text = text..StatReport_Strings_COMMA; text = text..MyData.SHP..StatReport_Strings_SHP; return text; end local function StatReport_GetMeleeText() local text = ""; text = text..StatReport_GetPvPSpecText(); if GetCombatRating(18) > 0 then text = text..MyData.MHASTE..StatReport_Strings_HASTE; text = text..StatReport_Strings_COMMA; end if GetCombatRating(6) > 0 then text = text..MyData.MHIT..StatReport_Strings_HIT; text = text..StatReport_Strings_COMMA; end if GetCombatRating(9) > 0 then text = text..MyData.MCRIT..StatReport_Strings_CRIT; text = text..StatReport_Strings_COMMA; end if GetCombatRating(24) > 0 then text = text..MyData.MEXPER..StatReport_Strings_EXPER; text = text..StatReport_Strings_COMMA; end text = text..MyData.MAP..StatReport_Strings_AP; return text; end local function StatReport_GetRangedText() local text = ""; text = text..StatReport_GetPvPSpecText(); if GetCombatRating(19) > 0 then text = text..MyData.RHASTE..StatReport_Strings_HASTE; text = text..StatReport_Strings_COMMA; end if GetCombatRating(7) > 0 then text = text..MyData.RHIT..StatReport_Strings_HIT; text = text..StatReport_Strings_COMMA; end if GetCombatRating(10) > 0 then text = text..MyData.RCRIT..StatReport_Strings_CRIT; text = text..StatReport_Strings_COMMA; end if GetCombatRating(24) > 0 then text = text..MyData.REXPER..StatReport_Strings_EXPER; text = text..StatReport_Strings_COMMA; end text = text..MyData.RAP..StatReport_Strings_AP; return text; end local function StatReport_GetTankText(rHaste) local text = ""; text = text..StatReport_GetPvPSpecText(1); text = text..MyData.DODGE..StatReport_Strings_DODGE; text = text..StatReport_Strings_COMMA; if GetCombatRating(6) > 0 then text = text..MyData.MHIT..StatReport_Strings_HIT; text = text..StatReport_Strings_COMMA; end if GetCombatRating(24) > 0 then text = text..MyData.MEXPER..StatReport_Strings_EXPER; text = text..StatReport_Strings_COMMA; end if (rHaste and GetCombatRating(18) > 0) then text = text..MyData.MHASTE..StatReport_Strings_HASTE; text = text..StatReport_Strings_COMMA; end if (MyData.CLASS_EN ~= "DRUID") then text = text..MyData.PARRY..StatReport_Strings_PARRY; text = text..StatReport_Strings_COMMA; end if (MyData.CLASS_EN == "WARRIOR" or MyData.CLASS_EN == "PALADIN") then text = text..MyData.BLOCK..StatReport_Strings_BLOCK; text = text..StatReport_Strings_COMMA; end text = text..MyData.ARMOR..StatReport_Strings_ARMOR; return text; end local function StatReport_TalentData() local curT = GetSpecialization() local tname,duties if curT then _, tname, _, _, _, duties = GetSpecializationInfo(curT) end local TalentStat = duties and _G[duties]; return tname, TalentStat; end local function StatReport_UnitAttackPower() local base, posBuff, negBuff = UnitAttackPower("player"); return floor(base + posBuff + negBuff); end local function StatReport_UnitRangedAttackPower() local base, posBuff, negBuff = UnitRangedAttackPower("player"); return floor(base + posBuff + negBuff); end local function StatReport_UnitArmor() local base, effectiveArmor, armor, posBuff, negBuff = UnitArmor("player"); return format("%s(%.1f%%)", floor(base + posBuff + negBuff),PaperDollFrame_GetArmorReduction(effectiveArmor, MyData.LV)); end local function StatReport_GetSpellBonusDamage() local SSP = GetSpellBonusDamage(2); for i=3, 7 do SSP = min(SSP, GetSpellBonusDamage(i)); end return floor(SSP); end local function StatReport_GetSpellCritChance() local SCRIT = GetSpellCritChance(2); for i=3, 7 do SCRIT = min(SCRIT, GetSpellCritChance(i)); end return format("%s(%.1f%%)", GetCombatRating(11),SCRIT); end local function StatReport_UpdateMyData() MyData.Name = UnitName("player"); MyData.LV = UnitLevel("player"); MyData.CLASS, MyData.CLASS_EN = UnitClass("player"); MyData.HP = UnitHealthMax("player"); MyData.TKEY, MyData.TDATA = StatReport_TalentData(); local sysLv,curLv = GetAverageItemLevel(); if curLv then MyData.ILVL = floor(curLv); end if GearScore_GetScore then MyData.GS = GearScore_GetScore(UnitName("player"), "player") or GS_Data[GetRealmName()].Players[UnitName("player")].GearScore or 0; end; MyData.STR = UnitStat("player", 1); MyData.AGI = UnitStat("player", 2); MyData.STA = UnitStat("player", 3); MyData.INT = UnitStat("player", 4); MyData.SPI = UnitStat("player", 5); if MyData.LV >=80 then MyData.MST = GetMasteryEffect(); end MyData.MEXPER = format("%s(%.1f%%)", GetCombatRating(24),select(1,GetExpertise())); MyData.MHASTE = format("%s(%.1f%%)", GetCombatRating(18),GetMeleeHaste()); MyData.MHIT = format("%s(%.1f%%)", GetCombatRating(6),GetCombatRatingBonus(6) + GetHitModifier()); MyData.MCRIT = format("%s(%.1f%%)", GetCombatRating(9),GetCritChance()); MyData.MAP = StatReport_UnitAttackPower(); MyData.REXPER = format("%s(%.1f%%)", GetCombatRating(24),select(3,GetExpertise())); MyData.RHASTE = format("%s(%.1f%%)", GetCombatRating(19),GetRangedHaste()); MyData.RHIT = format("%s(%.1f%%)", GetCombatRating(7),GetCombatRatingBonus(7) + GetHitModifier()); MyData.RCRIT = format("%s(%.1f%%)", GetCombatRating(10),GetRangedCritChance()); MyData.RAP = StatReport_UnitRangedAttackPower(); MyData.SHASTE = format("%s(%.1f%%)", GetCombatRating(20),UnitSpellHaste("player")); MyData.SHIT = format("%s(%.1f%%)", GetCombatRating(8),GetCombatRatingBonus(8) + GetSpellHitModifier()); MyData.SCRIT = StatReport_GetSpellCritChance(); MyData.SSP = StatReport_GetSpellBonusDamage(); MyData.SHP = GetSpellBonusHealing(); local _, casting = GetManaRegen(); if casting then MyData.SMR = floor(casting*5); end MyData.ARMOR = StatReport_UnitArmor(); MyData.DODGE = format("%s(%.1f%%)", GetCombatRating(3),GetDodgeChance()); MyData.PARRY = format("%s(%.1f%%)", GetCombatRating(4),GetParryChance()); MyData.BLOCK = format("%s(%.1f%%)", GetCombatRating(5),GetBlockChance()); MyData.CRDEF = format("%s(%.1f%%)", GetCombatRating(16),GetCombatRatingBonus(16) + GetModResilienceDamageReduction()); MyData.CRPP = format("%s(%.1f%%)", GetCombatRating(27),GetCombatRatingBonus(27)); end function createReportFrame() BlizzardOptionsPanel_SetCVarSafe(InterfaceOptionsSocialPanelSpamFilter.cvar, "0", InterfaceOptionsSocialPanelSpamFilter.event); local reportButton = _G.BFCIconFrameReportButton if BFChatFrame_CheckNumber then reportButton:SetPoint("LEFT",_G.BFCIconFrameRollButton,"RIGHT",1,0) else reportButton:SetPoint("TOPLEFT",BFCChatFrame,"TOPLEFT",295,-3) end if BFChat.db.profile.enableReportButton then reportButton:Show() end reportButton:SetScript("OnEnter",function(self) BigFoot_ShowNewbieTooltip(L["Report"]) end) reportButton:SetScript("OnLeave",function(self) BigFoot_HideNewbieTooltip() end) end function BFCIconFrameReportButton_OnClick(self,button) if button=="LeftButton" then StatReport_UpdateMyData(); local msg = BF_StatReport; msg = msg..MyData.CLASS; msg = msg..StatReport_Strings_COMMA; if MyData.ILVL then msg = msg..StatReport_Strings_ILVL..MyData.ILVL; msg = msg..StatReport_Strings_COMMA; end if MyData.GS then msg = msg.." GS:"..MyData.GS; msg = msg..StatReport_Strings_COMMA; end if MyData.TKEY and MyData.TDATA then msg = msg..StatReport_Strings_TALENT..":"..MyData.TKEY.."("..MyData.TDATA..")"; msg = msg..StatReport_Strings_COMMA; end if MyData.LV >=80 then msg = msg..format("%.1f%%", MyData.MST)..StatReport_Strings_MST; msg = msg..StatReport_Strings_COMMA; end if MyData.CLASS_EN == "MAGE" or MyData.CLASS_EN == "WARLOCK" then msg = msg..StatReport_GetSpellText(); end if MyData.CLASS_EN == "ROGUE" then msg = msg..StatReport_GetMeleeText(); end if MyData.CLASS_EN == "HUNTER" then msg = msg..StatReport_GetRangedText(); end if MyData.CLASS_EN == "DRUID" then if MyData.TKEY == select(2,GetSpecializationInfo(1)) then msg = msg..StatReport_GetSpellText(); elseif MyData.TKEY == select(2,GetSpecializationInfo(3)) then msg = msg..StatReport_GetTankText(); elseif MyData.TKEY == select(2,GetSpecializationInfo(4)) then msg = msg..StatReport_GetHealText(); else msg = msg..StatReport_GetMeleeText(); end end if MyData.CLASS_EN == "SHAMAN" then if MyData.TKEY == select(2,GetSpecializationInfo(1)) then msg = msg..StatReport_GetSpellText(); elseif MyData.TKEY == select(2,GetSpecializationInfo(3)) then msg = msg..StatReport_GetHealText(); else msg = msg..StatReport_GetMeleeText(); end end if MyData.CLASS_EN == "PALADIN" then if MyData.TKEY == select(2,GetSpecializationInfo(1)) then msg = msg..StatReport_GetHealText(); elseif MyData.TKEY == select(2,GetSpecializationInfo(2)) then msg = msg..StatReport_GetTankText(1); else msg = msg..StatReport_GetMeleeText(); end end if MyData.CLASS_EN == "PRIEST" then if MyData.TKEY == select(2,GetSpecializationInfo(1)) then msg = msg..StatReport_GetSpellAndHealText(); elseif MyData.TKEY == select(2,GetSpecializationInfo(2)) then msg = msg..StatReport_GetHealText(); else msg = msg..StatReport_GetSpellText(); end end if MyData.CLASS_EN == "WARRIOR" then if MyData.TKEY == select(2,GetSpecializationInfo(3)) then msg = msg..StatReport_GetTankText(); else msg = msg..StatReport_GetMeleeText(); end end if MyData.CLASS_EN == "DEATHKNIGHT" then if MyData.TKEY == select(2,GetSpecializationInfo(1)) then msg = msg..StatReport_GetTankText(); else msg = msg..StatReport_GetMeleeText(); end end if MyData.CLASS_EN == "MONK" then if MyData.TKEY == select(2,GetSpecializationInfo(1)) then msg = msg..StatReport_GetTankText(); elseif MyData.TKEY == select(2,GetSpecializationInfo(2)) then msg = msg..StatReport_GetHealText(); else msg = msg..StatReport_GetMeleeText(); end end msg = msg..StatReport_Strings_END; StatReport_ChatFrameEditBoxMSG(msg); end end function BFCIconFrameReportButton_OnUpdate(self) for i = 1, NUM_CHAT_WINDOWS do local CheckEB = _G[format("%s%d%s", "ChatFrame", i, "EditBox")]; if CheckEB:GetAlpha() ==1 and CheckEB:IsShown() then CurEB = CheckEB; BFC_CurEB =CheckEB; return; end end end --[[ function BFCIconFrameReportButton_SetButtonIcon(self, Myclass) self.icon = self:CreateTexture(nil, "OVERLAY"); self.icon:SetWidth(21); self.icon:SetHeight(21); self.icon:SetPoint("CENTER", self, 0, 0); self.icon:SetTexture("Interface\\WorldStateFrame\\Icons-Classes"); local coords = CLASS_BUTTONS[Myclass]; self.icon:SetTexCoord(coords[1],coords[2],coords[3],coords[4]); self.icon:Show(); end ]] 
